generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ElementNode {
  id              String     @id @default(cuid())
  type            String
  textAlign       String?
  fontFamily      String?
  paraSpaceAfter  Int?
  paraSpaceBefore Int?
  lineHeight      Float?
  documentId      String
  document        Document   @relation(fields: [documentId], references: [id])
  children        TextNode[]
}

model TextNode {
  id              String      @id @default(cuid())
  text            String?
  textAlign       String?
  color           String?
  fontSize        Int?
  bold            Boolean?
  italic          Boolean?
  underline       Boolean?
  backgroundColor String?
  elementId       String
  element         ElementNode @relation(fields: [elementId], references: [id])
}

model Document {
  id               String        @id @default(cuid())
  title            String        @default("Untitled Document")
  elements         ElementNode[]
  ownerId          String
  readAccessUsers  String[]
  writeAccessUsers String[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}
